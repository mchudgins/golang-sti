#!/bin/bash -e
#
# S2I assemble script for the 'springboot-sti' image.
# The 'assemble' script builds your application source ready to run.
#
# For more information refer to the documentation:
#	https://github.com/openshift/source-to-image/blob/master/docs/builder_image.md
#

if [ "$1" = "-h" ]; then
	# If the 'springboot-sti' assemble script is executed with '-h' flag,
	# print the usage.
	exec /usr/local/sti/usage
fi

# # Restore artifacts from the previous build (if they exist).
# #
# if [ "$(ls /tmp/artifacts/ 2>/dev/null)" ]; then
#   echo "---> Restoring build artifacts"
#   mv /tmp/artifacts/. ./
# fi
#
# echo "---> Installing application source"
# cp -Rf /tmp/src/. ./
#
# echo "---> Building application from source"
# # TODO: Add build steps for your application, eg npm install, bundle install

##############################################################################

# Source code provided to STI is at ${HOME}/source
HOME=/opt/app-root/src
GOROOT=/go
LOCAL_SOURCE_DIR=${GOROOT}/src/app
mkdir -p $LOCAL_SOURCE_DIR

DEPLOY_DIR=/opt/openshift

# the subdirectory within LOCAL_SOURCE_DIR from where we should copy build artifacts
ARTIFACT_DIR=${ARTIFACT_DIR-target}

function copy_artifacts() {
	echo resulting directory is:
	ls -al
  if [ -x $LOCAL_SOURCE_DIR/app ]; then
    echo "Copying 'app' artifact from $LOCAL_SOURCE_DIR/app directory into $DEPLOY_DIR for later deployment..."
    cp -v $LOCAL_SOURCE_DIR/app $DEPLOY_DIR 2> /dev/null
  fi
}

# Copy the source for compilation
cp -ad /tmp/src/* $LOCAL_SOURCE_DIR

# If a Makefile is present, this is a normal build scenario
# so run make.
if [ -f "$LOCAL_SOURCE_DIR/Makefile" ]; then
  echo "Building with make. $LOCAL_SOURCE_DIR/Makefile found."
  pushd $LOCAL_SOURCE_DIR &> /dev/null

  if [ -z "$BUILDER_ARGS" ]; then
    export BUILDER_ARGS=""
  fi

  echo "Found Makefile... attempting to build with make ${BUILDER_ARGS}"

  echo "Make version:"
  make -v

  # Execute the actual build
  make $BUILDER_ARGS

  ERR=$?
  if [ $ERR -ne 0 ]; then
    echo "Aborting due to error code $ERR from build"
    exit $ERR
  fi

  # Copy built artifacts (if any!) from the target/ directory
  # to the $DEPLOY_DIR directory for later deployment
  copy_artifacts target

  # clean up after make
  make clean
  if [ -d "$GOROOT/pkg" ]; then
    rm -r "$GOROOT/pkg"
  fi

  popd &> /dev/null
else
   echo "Building with go."

   pushd $LOCAL_SOURCE_DIR &> /dev/null

  if [ -z "$BUILDER_ARGS" ]; then
    export BUILDER_ARGS=""
    # TODO: Specify setting file with -c sss
  fi

  echo "Go version:"
  go version

  # Execute the actual build
  go build $BUILDER_ARGS -o app

  ERR=$?
  if [ $ERR -ne 0 ]; then
    echo "Aborting due to error code $ERR from Go build"
    exit $ERR
  fi

  # Copy built artifacts (if any!) from the target/ directory
  # to the $DEPLOY_DIR directory for later deployment
  copy_artifacts build/libs


  # clean up after go build
  rm -rf ${GOROOT}/pkg

#  if [ -d "$HOME/.m2/repository" ]; then
#    rm -r "$HOME/.m2/repository"
#  fi

  popd &> /dev/null
fi

# Copy (probably binary) artifacts from the deployments/
# directory to the $DEPLOY_DIR directory for later deployment
# copy_artifacts "deployments"

# if [ -d $LOCAL_SOURCE_DIR/configuration ]; then
#   echo "Copying config files from project..."
#   cp -v $LOCAL_SOURCE_DIR/configuration/* $ARTIFACTS_HOME
# fi

# As a Go app you should only have 1 artifact
if [ $(ls /opt/openshift/* | wc -l) -eq 1 ]; then
  [ ! -f /opt/openshift/app ] && echo "Application could not be properly built." && exit 1
  echo "Application is located in /opt/openshift/app"
else
  echo "Whoa.  More than one file found!  This builder assumes you have a single build artifact."
  echo "Found the following files:  " `ls /opt/openshift/*`
  exit 1
fi
